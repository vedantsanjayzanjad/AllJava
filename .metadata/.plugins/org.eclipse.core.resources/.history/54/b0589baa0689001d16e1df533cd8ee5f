package com.lcwd.user.service.services.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.lcwd.user.service.entities.Hotel;
import com.lcwd.user.service.entities.Rating;
import com.lcwd.user.service.entities.User;
import com.lcwd.user.service.exceptions.ResourceNotFoundException;
import com.lcwd.user.service.external.HotelServ;
import com.lcwd.user.service.repository.UserRepository;
import com.lcwd.user.service.services.UserServices;
import com.netflix.discovery.converters.Auto;

@Service
public class UserServicesImpl implements UserServices {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private HotelServ hotelServ;
	
	private Logger log = org.slf4j.LoggerFactory.getLogger(UserServicesImpl.class);

	@Override
	public User saveUser(User user) {
		// TODO Auto-generated method stub
		String randomUserId = UUID.randomUUID().toString();
		user.setUserId(randomUserId);
		return userRepository.save(user);
	}

	@Override
	public List<User> getAllUser() {
		// TODO Auto-generated method stub
		return userRepository.findAll();
	}

	@Override
	public User getUser(String userId) {
		// TODO Auto-generated method stub
		User user = userRepository.findById(userId).
		orElseThrow(() -> new ResourceNotFoundException("User with given id is not found on server !! :" + userId));

		// fetch rating of the user from this
		// http://localhost:8082/rating/user/8bc89ad9-f617-43b8-afb9-8df82b79d0a2
		Rating [] forObject = restTemplate.getForObject("http://RATINGSERVICE/rating/user/"+user.getUserId(), Rating [].class);	
		log.info("[]", forObject);
		List<Rating> ratings = Arrays.stream(forObject).toList();	
		List<Rating> ratingList = ratings.stream().map(rating ->
		{	
		//ResponseEntity<Hotel> forEntity =restTemplate.getForEntity("http://HOTELSERVICE/hotel/"+rating.getHotelId(), Hotel.class);
		Hotel hotel = hotelServ.getHotel(rating.getHotelId());
		//log.info("Response status code",forEntity.getStatusCode());
		rating.setHotel(hotel);
		return rating;
		}).collect(Collectors.toList());
		
		user.setRatings(ratingList);
		return user;
	}

}
